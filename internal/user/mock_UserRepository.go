// Code generated by mockery v2.53.0. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// BuyMembership provides a mock function with given fields: userId, plan
func (_m *MockUserRepository) BuyMembership(userId int, plan *BuyPlan) error {
	ret := _m.Called(userId, plan)

	if len(ret) == 0 {
		panic("no return value specified for BuyMembership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *BuyPlan) error); ok {
		r0 = rf(userId, plan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepository_BuyMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuyMembership'
type MockUserRepository_BuyMembership_Call struct {
	*mock.Call
}

// BuyMembership is a helper method to define mock.On call
//   - userId int
//   - plan *BuyPlan
func (_e *MockUserRepository_Expecter) BuyMembership(userId interface{}, plan interface{}) *MockUserRepository_BuyMembership_Call {
	return &MockUserRepository_BuyMembership_Call{Call: _e.mock.On("BuyMembership", userId, plan)}
}

func (_c *MockUserRepository_BuyMembership_Call) Run(run func(userId int, plan *BuyPlan)) *MockUserRepository_BuyMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*BuyPlan))
	})
	return _c
}

func (_c *MockUserRepository_BuyMembership_Call) Return(_a0 error) *MockUserRepository_BuyMembership_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_BuyMembership_Call) RunAndReturn(run func(int, *BuyPlan) error) *MockUserRepository_BuyMembership_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserbyId provides a mock function with given fields: id
func (_m *MockUserRepository) GetUserbyId(id int) (*User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserbyId")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_GetUserbyId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserbyId'
type MockUserRepository_GetUserbyId_Call struct {
	*mock.Call
}

// GetUserbyId is a helper method to define mock.On call
//   - id int
func (_e *MockUserRepository_Expecter) GetUserbyId(id interface{}) *MockUserRepository_GetUserbyId_Call {
	return &MockUserRepository_GetUserbyId_Call{Call: _e.mock.On("GetUserbyId", id)}
}

func (_c *MockUserRepository_GetUserbyId_Call) Run(run func(id int)) *MockUserRepository_GetUserbyId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUserRepository_GetUserbyId_Call) Return(_a0 *User, _a1 error) *MockUserRepository_GetUserbyId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserbyId_Call) RunAndReturn(run func(int) (*User, error)) *MockUserRepository_GetUserbyId_Call {
	_c.Call.Return(run)
	return _c
}

// SearchGymsByPincode provides a mock function with given fields: code
func (_m *MockUserRepository) SearchGymsByPincode(code int) (*[]GetGym, error) {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for SearchGymsByPincode")
	}

	var r0 *[]GetGym
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]GetGym, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(int) *[]GetGym); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]GetGym)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_SearchGymsByPincode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchGymsByPincode'
type MockUserRepository_SearchGymsByPincode_Call struct {
	*mock.Call
}

// SearchGymsByPincode is a helper method to define mock.On call
//   - code int
func (_e *MockUserRepository_Expecter) SearchGymsByPincode(code interface{}) *MockUserRepository_SearchGymsByPincode_Call {
	return &MockUserRepository_SearchGymsByPincode_Call{Call: _e.mock.On("SearchGymsByPincode", code)}
}

func (_c *MockUserRepository_SearchGymsByPincode_Call) Run(run func(code int)) *MockUserRepository_SearchGymsByPincode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUserRepository_SearchGymsByPincode_Call) Return(_a0 *[]GetGym, _a1 error) *MockUserRepository_SearchGymsByPincode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_SearchGymsByPincode_Call) RunAndReturn(run func(int) (*[]GetGym, error)) *MockUserRepository_SearchGymsByPincode_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserProfile provides a mock function with given fields: id, rUser
func (_m *MockUserRepository) UpdateUserProfile(id int, rUser User) (*User, error) {
	ret := _m.Called(id, rUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserProfile")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, User) (*User, error)); ok {
		return rf(id, rUser)
	}
	if rf, ok := ret.Get(0).(func(int, User) *User); ok {
		r0 = rf(id, rUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, User) error); ok {
		r1 = rf(id, rUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_UpdateUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserProfile'
type MockUserRepository_UpdateUserProfile_Call struct {
	*mock.Call
}

// UpdateUserProfile is a helper method to define mock.On call
//   - id int
//   - rUser User
func (_e *MockUserRepository_Expecter) UpdateUserProfile(id interface{}, rUser interface{}) *MockUserRepository_UpdateUserProfile_Call {
	return &MockUserRepository_UpdateUserProfile_Call{Call: _e.mock.On("UpdateUserProfile", id, rUser)}
}

func (_c *MockUserRepository_UpdateUserProfile_Call) Run(run func(id int, rUser User)) *MockUserRepository_UpdateUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(User))
	})
	return _c
}

func (_c *MockUserRepository_UpdateUserProfile_Call) Return(_a0 *User, _a1 error) *MockUserRepository_UpdateUserProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_UpdateUserProfile_Call) RunAndReturn(run func(int, User) (*User, error)) *MockUserRepository_UpdateUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// UserActiveMemebrship provides a mock function with given fields: id
func (_m *MockUserRepository) UserActiveMemebrship(id int) (*Membership, *[]Branches, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UserActiveMemebrship")
	}

	var r0 *Membership
	var r1 *[]Branches
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (*Membership, *[]Branches, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *Membership); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(int) *[]Branches); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*[]Branches)
		}
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserRepository_UserActiveMemebrship_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserActiveMemebrship'
type MockUserRepository_UserActiveMemebrship_Call struct {
	*mock.Call
}

// UserActiveMemebrship is a helper method to define mock.On call
//   - id int
func (_e *MockUserRepository_Expecter) UserActiveMemebrship(id interface{}) *MockUserRepository_UserActiveMemebrship_Call {
	return &MockUserRepository_UserActiveMemebrship_Call{Call: _e.mock.On("UserActiveMemebrship", id)}
}

func (_c *MockUserRepository_UserActiveMemebrship_Call) Run(run func(id int)) *MockUserRepository_UserActiveMemebrship_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUserRepository_UserActiveMemebrship_Call) Return(_a0 *Membership, _a1 *[]Branches, _a2 error) *MockUserRepository_UserActiveMemebrship_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserRepository_UserActiveMemebrship_Call) RunAndReturn(run func(int) (*Membership, *[]Branches, error)) *MockUserRepository_UserActiveMemebrship_Call {
	_c.Call.Return(run)
	return _c
}

// UserWalletBalance provides a mock function with given fields: id
func (_m *MockUserRepository) UserWalletBalance(id int) (*Wallet, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for UserWalletBalance")
	}

	var r0 *Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*Wallet, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *Wallet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepository_UserWalletBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserWalletBalance'
type MockUserRepository_UserWalletBalance_Call struct {
	*mock.Call
}

// UserWalletBalance is a helper method to define mock.On call
//   - id int
func (_e *MockUserRepository_Expecter) UserWalletBalance(id interface{}) *MockUserRepository_UserWalletBalance_Call {
	return &MockUserRepository_UserWalletBalance_Call{Call: _e.mock.On("UserWalletBalance", id)}
}

func (_c *MockUserRepository_UserWalletBalance_Call) Run(run func(id int)) *MockUserRepository_UserWalletBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUserRepository_UserWalletBalance_Call) Return(_a0 *Wallet, _a1 error) *MockUserRepository_UserWalletBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_UserWalletBalance_Call) RunAndReturn(run func(int) (*Wallet, error)) *MockUserRepository_UserWalletBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
