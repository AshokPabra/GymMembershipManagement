// Code generated by mockery v2.53.0. DO NOT EDIT.

package user

import mock "github.com/stretchr/testify/mock"

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// GetActiveMembership provides a mock function with given fields: id
func (_m *MockUserService) GetActiveMembership(id int) (*Membership, *[]Branches, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveMembership")
	}

	var r0 *Membership
	var r1 *[]Branches
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (*Membership, *[]Branches, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *Membership); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Membership)
		}
	}

	if rf, ok := ret.Get(1).(func(int) *[]Branches); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*[]Branches)
		}
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserService_GetActiveMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveMembership'
type MockUserService_GetActiveMembership_Call struct {
	*mock.Call
}

// GetActiveMembership is a helper method to define mock.On call
//   - id int
func (_e *MockUserService_Expecter) GetActiveMembership(id interface{}) *MockUserService_GetActiveMembership_Call {
	return &MockUserService_GetActiveMembership_Call{Call: _e.mock.On("GetActiveMembership", id)}
}

func (_c *MockUserService_GetActiveMembership_Call) Run(run func(id int)) *MockUserService_GetActiveMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUserService_GetActiveMembership_Call) Return(_a0 *Membership, _a1 *[]Branches, _a2 error) *MockUserService_GetActiveMembership_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserService_GetActiveMembership_Call) RunAndReturn(run func(int) (*Membership, *[]Branches, error)) *MockUserService_GetActiveMembership_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserProfile provides a mock function with given fields: id
func (_m *MockUserService) GetUserProfile(id int) (*User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetUserProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserProfile'
type MockUserService_GetUserProfile_Call struct {
	*mock.Call
}

// GetUserProfile is a helper method to define mock.On call
//   - id int
func (_e *MockUserService_Expecter) GetUserProfile(id interface{}) *MockUserService_GetUserProfile_Call {
	return &MockUserService_GetUserProfile_Call{Call: _e.mock.On("GetUserProfile", id)}
}

func (_c *MockUserService_GetUserProfile_Call) Run(run func(id int)) *MockUserService_GetUserProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUserService_GetUserProfile_Call) Return(_a0 *User, _a1 error) *MockUserService_GetUserProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetUserProfile_Call) RunAndReturn(run func(int) (*User, error)) *MockUserService_GetUserProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetWalletBalance provides a mock function with given fields: id
func (_m *MockUserService) GetWalletBalance(id int) (*Wallet, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletBalance")
	}

	var r0 *Wallet
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*Wallet, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *Wallet); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Wallet)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_GetWalletBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWalletBalance'
type MockUserService_GetWalletBalance_Call struct {
	*mock.Call
}

// GetWalletBalance is a helper method to define mock.On call
//   - id int
func (_e *MockUserService_Expecter) GetWalletBalance(id interface{}) *MockUserService_GetWalletBalance_Call {
	return &MockUserService_GetWalletBalance_Call{Call: _e.mock.On("GetWalletBalance", id)}
}

func (_c *MockUserService_GetWalletBalance_Call) Run(run func(id int)) *MockUserService_GetWalletBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUserService_GetWalletBalance_Call) Return(_a0 *Wallet, _a1 error) *MockUserService_GetWalletBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_GetWalletBalance_Call) RunAndReturn(run func(int) (*Wallet, error)) *MockUserService_GetWalletBalance_Call {
	_c.Call.Return(run)
	return _c
}

// PurchaseGymPlan provides a mock function with given fields: userId, plan
func (_m *MockUserService) PurchaseGymPlan(userId int, plan *BuyPlan) error {
	ret := _m.Called(userId, plan)

	if len(ret) == 0 {
		panic("no return value specified for PurchaseGymPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, *BuyPlan) error); ok {
		r0 = rf(userId, plan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_PurchaseGymPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurchaseGymPlan'
type MockUserService_PurchaseGymPlan_Call struct {
	*mock.Call
}

// PurchaseGymPlan is a helper method to define mock.On call
//   - userId int
//   - plan *BuyPlan
func (_e *MockUserService_Expecter) PurchaseGymPlan(userId interface{}, plan interface{}) *MockUserService_PurchaseGymPlan_Call {
	return &MockUserService_PurchaseGymPlan_Call{Call: _e.mock.On("PurchaseGymPlan", userId, plan)}
}

func (_c *MockUserService_PurchaseGymPlan_Call) Run(run func(userId int, plan *BuyPlan)) *MockUserService_PurchaseGymPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*BuyPlan))
	})
	return _c
}

func (_c *MockUserService_PurchaseGymPlan_Call) Return(_a0 error) *MockUserService_PurchaseGymPlan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_PurchaseGymPlan_Call) RunAndReturn(run func(int, *BuyPlan) error) *MockUserService_PurchaseGymPlan_Call {
	_c.Call.Return(run)
	return _c
}

// SearchGyms provides a mock function with given fields: pincode
func (_m *MockUserService) SearchGyms(pincode string) (*[]GetGym, error) {
	ret := _m.Called(pincode)

	if len(ret) == 0 {
		panic("no return value specified for SearchGyms")
	}

	var r0 *[]GetGym
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*[]GetGym, error)); ok {
		return rf(pincode)
	}
	if rf, ok := ret.Get(0).(func(string) *[]GetGym); ok {
		r0 = rf(pincode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]GetGym)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pincode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_SearchGyms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchGyms'
type MockUserService_SearchGyms_Call struct {
	*mock.Call
}

// SearchGyms is a helper method to define mock.On call
//   - pincode string
func (_e *MockUserService_Expecter) SearchGyms(pincode interface{}) *MockUserService_SearchGyms_Call {
	return &MockUserService_SearchGyms_Call{Call: _e.mock.On("SearchGyms", pincode)}
}

func (_c *MockUserService_SearchGyms_Call) Run(run func(pincode string)) *MockUserService_SearchGyms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_SearchGyms_Call) Return(_a0 *[]GetGym, _a1 error) *MockUserService_SearchGyms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_SearchGyms_Call) RunAndReturn(run func(string) (*[]GetGym, error)) *MockUserService_SearchGyms_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProfile provides a mock function with given fields: id, rUSer
func (_m *MockUserService) UpdateProfile(id int, rUSer User) (*User, error) {
	ret := _m.Called(id, rUSer)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, User) (*User, error)); ok {
		return rf(id, rUSer)
	}
	if rf, ok := ret.Get(0).(func(int, User) *User); ok {
		r0 = rf(id, rUSer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, User) error); ok {
		r1 = rf(id, rUSer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_UpdateProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProfile'
type MockUserService_UpdateProfile_Call struct {
	*mock.Call
}

// UpdateProfile is a helper method to define mock.On call
//   - id int
//   - rUSer User
func (_e *MockUserService_Expecter) UpdateProfile(id interface{}, rUSer interface{}) *MockUserService_UpdateProfile_Call {
	return &MockUserService_UpdateProfile_Call{Call: _e.mock.On("UpdateProfile", id, rUSer)}
}

func (_c *MockUserService_UpdateProfile_Call) Run(run func(id int, rUSer User)) *MockUserService_UpdateProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(User))
	})
	return _c
}

func (_c *MockUserService_UpdateProfile_Call) Return(_a0 *User, _a1 error) *MockUserService_UpdateProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_UpdateProfile_Call) RunAndReturn(run func(int, User) (*User, error)) *MockUserService_UpdateProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
