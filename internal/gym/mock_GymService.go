// Code generated by mockery v2.53.0. DO NOT EDIT.

package gym

import mock "github.com/stretchr/testify/mock"

// MockGymService is an autogenerated mock type for the GymService type
type MockGymService struct {
	mock.Mock
}

type MockGymService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGymService) EXPECT() *MockGymService_Expecter {
	return &MockGymService_Expecter{mock: &_m.Mock}
}

// CreateGym provides a mock function with given fields: gym
func (_m *MockGymService) CreateGym(gym *GymStruct) (string, error) {
	ret := _m.Called(gym)

	if len(ret) == 0 {
		panic("no return value specified for CreateGym")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*GymStruct) (string, error)); ok {
		return rf(gym)
	}
	if rf, ok := ret.Get(0).(func(*GymStruct) string); ok {
		r0 = rf(gym)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*GymStruct) error); ok {
		r1 = rf(gym)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGymService_CreateGym_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGym'
type MockGymService_CreateGym_Call struct {
	*mock.Call
}

// CreateGym is a helper method to define mock.On call
//   - gym *GymStruct
func (_e *MockGymService_Expecter) CreateGym(gym interface{}) *MockGymService_CreateGym_Call {
	return &MockGymService_CreateGym_Call{Call: _e.mock.On("CreateGym", gym)}
}

func (_c *MockGymService_CreateGym_Call) Run(run func(gym *GymStruct)) *MockGymService_CreateGym_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*GymStruct))
	})
	return _c
}

func (_c *MockGymService_CreateGym_Call) Return(_a0 string, _a1 error) *MockGymService_CreateGym_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGymService_CreateGym_Call) RunAndReturn(run func(*GymStruct) (string, error)) *MockGymService_CreateGym_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePlan provides a mock function with given fields: plan
func (_m *MockGymService) CreatePlan(plan Plan) (string, error) {
	ret := _m.Called(plan)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlan")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(Plan) (string, error)); ok {
		return rf(plan)
	}
	if rf, ok := ret.Get(0).(func(Plan) string); ok {
		r0 = rf(plan)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(Plan) error); ok {
		r1 = rf(plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGymService_CreatePlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePlan'
type MockGymService_CreatePlan_Call struct {
	*mock.Call
}

// CreatePlan is a helper method to define mock.On call
//   - plan Plan
func (_e *MockGymService_Expecter) CreatePlan(plan interface{}) *MockGymService_CreatePlan_Call {
	return &MockGymService_CreatePlan_Call{Call: _e.mock.On("CreatePlan", plan)}
}

func (_c *MockGymService_CreatePlan_Call) Run(run func(plan Plan)) *MockGymService_CreatePlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Plan))
	})
	return _c
}

func (_c *MockGymService_CreatePlan_Call) Return(_a0 string, _a1 error) *MockGymService_CreatePlan_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGymService_CreatePlan_Call) RunAndReturn(run func(Plan) (string, error)) *MockGymService_CreatePlan_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePlan provides a mock function with given fields: planId
func (_m *MockGymService) DeletePlan(planId int) error {
	ret := _m.Called(planId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(planId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGymService_DeletePlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePlan'
type MockGymService_DeletePlan_Call struct {
	*mock.Call
}

// DeletePlan is a helper method to define mock.On call
//   - planId int
func (_e *MockGymService_Expecter) DeletePlan(planId interface{}) *MockGymService_DeletePlan_Call {
	return &MockGymService_DeletePlan_Call{Call: _e.mock.On("DeletePlan", planId)}
}

func (_c *MockGymService_DeletePlan_Call) Run(run func(planId int)) *MockGymService_DeletePlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockGymService_DeletePlan_Call) Return(_a0 error) *MockGymService_DeletePlan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGymService_DeletePlan_Call) RunAndReturn(run func(int) error) *MockGymService_DeletePlan_Call {
	_c.Call.Return(run)
	return _c
}

// GetGymProfile provides a mock function with given fields: gymId
func (_m *MockGymService) GetGymProfile(gymId int) (*[]GetGym, error) {
	ret := _m.Called(gymId)

	if len(ret) == 0 {
		panic("no return value specified for GetGymProfile")
	}

	var r0 *[]GetGym
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]GetGym, error)); ok {
		return rf(gymId)
	}
	if rf, ok := ret.Get(0).(func(int) *[]GetGym); ok {
		r0 = rf(gymId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]GetGym)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(gymId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGymService_GetGymProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGymProfile'
type MockGymService_GetGymProfile_Call struct {
	*mock.Call
}

// GetGymProfile is a helper method to define mock.On call
//   - gymId int
func (_e *MockGymService_Expecter) GetGymProfile(gymId interface{}) *MockGymService_GetGymProfile_Call {
	return &MockGymService_GetGymProfile_Call{Call: _e.mock.On("GetGymProfile", gymId)}
}

func (_c *MockGymService_GetGymProfile_Call) Run(run func(gymId int)) *MockGymService_GetGymProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockGymService_GetGymProfile_Call) Return(_a0 *[]GetGym, _a1 error) *MockGymService_GetGymProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGymService_GetGymProfile_Call) RunAndReturn(run func(int) (*[]GetGym, error)) *MockGymService_GetGymProfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGymService creates a new instance of MockGymService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGymService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGymService {
	mock := &MockGymService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
