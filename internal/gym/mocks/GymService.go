// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	utils "github.com/AshokaJS/DhakadFitness/utils"
	mock "github.com/stretchr/testify/mock"
)

// GymService is an autogenerated mock type for the GymService type
type GymService struct {
	mock.Mock
}

// CreateGym provides a mock function with given fields: _a0
func (_m *GymService) CreateGym(_a0 *utils.GymStruct) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateGym")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*utils.GymStruct) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*utils.GymStruct) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*utils.GymStruct) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePlan provides a mock function with given fields: plan
func (_m *GymService) CreatePlan(plan utils.Plan) (string, error) {
	ret := _m.Called(plan)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlan")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(utils.Plan) (string, error)); ok {
		return rf(plan)
	}
	if rf, ok := ret.Get(0).(func(utils.Plan) string); ok {
		r0 = rf(plan)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(utils.Plan) error); ok {
		r1 = rf(plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlan provides a mock function with given fields: planId
func (_m *GymService) DeletePlan(planId int) error {
	ret := _m.Called(planId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(planId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGymProfile provides a mock function with given fields: gymId
func (_m *GymService) GetGymProfile(gymId int) (*[]utils.GetGym, error) {
	ret := _m.Called(gymId)

	if len(ret) == 0 {
		panic("no return value specified for GetGymProfile")
	}

	var r0 *[]utils.GetGym
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]utils.GetGym, error)); ok {
		return rf(gymId)
	}
	if rf, ok := ret.Get(0).(func(int) *[]utils.GetGym); ok {
		r0 = rf(gymId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]utils.GetGym)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(gymId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGymService creates a new instance of GymService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGymService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GymService {
	mock := &GymService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
