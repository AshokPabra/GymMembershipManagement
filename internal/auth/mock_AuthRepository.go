// Code generated by mockery v2.53.0. DO NOT EDIT.

package auth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, username, email, password, role
func (_m *MockAuthRepository) CreateUser(ctx context.Context, username string, email string, password string, role string) error {
	ret := _m.Called(ctx, username, email, password, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, username, email, password, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockAuthRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - email string
//   - password string
//   - role string
func (_e *MockAuthRepository_Expecter) CreateUser(ctx interface{}, username interface{}, email interface{}, password interface{}, role interface{}) *MockAuthRepository_CreateUser_Call {
	return &MockAuthRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, username, email, password, role)}
}

func (_c *MockAuthRepository_CreateUser_Call) Run(run func(ctx context.Context, username string, email string, password string, role string)) *MockAuthRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockAuthRepository_CreateUser_Call) Return(_a0 error) *MockAuthRepository_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_CreateUser_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockAuthRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *MockAuthRepository) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockAuthRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockAuthRepository_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockAuthRepository_GetUserByEmail_Call {
	return &MockAuthRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockAuthRepository_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockAuthRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthRepository_GetUserByEmail_Call) Return(_a0 *User, _a1 error) *MockAuthRepository_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockAuthRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
