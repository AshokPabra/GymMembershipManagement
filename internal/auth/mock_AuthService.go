// Code generated by mockery v2.53.0. DO NOT EDIT.

package auth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, email, role, password
func (_m *MockAuthService) Authenticate(ctx context.Context, email string, role string, password string) (*User, error) {
	ret := _m.Called(ctx, email, role, password)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*User, error)); ok {
		return rf(ctx, email, role, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *User); ok {
		r0 = rf(ctx, email, role, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, email, role, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockAuthService_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - role string
//   - password string
func (_e *MockAuthService_Expecter) Authenticate(ctx interface{}, email interface{}, role interface{}, password interface{}) *MockAuthService_Authenticate_Call {
	return &MockAuthService_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, email, role, password)}
}

func (_c *MockAuthService_Authenticate_Call) Run(run func(ctx context.Context, email string, role string, password string)) *MockAuthService_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockAuthService_Authenticate_Call) Return(_a0 *User, _a1 error) *MockAuthService_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_Authenticate_Call) RunAndReturn(run func(context.Context, string, string, string) (*User, error)) *MockAuthService_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Signup provides a mock function with given fields: ctx, username, email, password, role
func (_m *MockAuthService) Signup(ctx context.Context, username string, email string, password string, role string) error {
	ret := _m.Called(ctx, username, email, password, role)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, username, email, password, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthService_Signup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signup'
type MockAuthService_Signup_Call struct {
	*mock.Call
}

// Signup is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - email string
//   - password string
//   - role string
func (_e *MockAuthService_Expecter) Signup(ctx interface{}, username interface{}, email interface{}, password interface{}, role interface{}) *MockAuthService_Signup_Call {
	return &MockAuthService_Signup_Call{Call: _e.mock.On("Signup", ctx, username, email, password, role)}
}

func (_c *MockAuthService_Signup_Call) Run(run func(ctx context.Context, username string, email string, password string, role string)) *MockAuthService_Signup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockAuthService_Signup_Call) Return(_a0 error) *MockAuthService_Signup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthService_Signup_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockAuthService_Signup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
